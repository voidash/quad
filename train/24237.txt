सफ्टवेयरको अस्तित्वले मूलभूत रूपमा उक्त सफ्टवेयरलाई कसरी प्रयोग गर्ने सम्बन्धि निर्णयको बारेमा प्रश्न उठाउँदछ। उदाहरण स्वरूप, कुनै सफ्टवेयर आफुसँग भएको एकजना प्रयोगकर्ताले उक्त सफ्टवेयर चाहिएको अर्को प्रयोगकर्तालाई भेट्छ। ती दुबै जनाको बिचमा एकले अर्कालाई सफ्टवेयर वितरण गर्न सक्छ। तर त्यो सफ्टवेयर वितरण हुने कि नहुने भन्ने निर्णय चाहिँ कसले लिने - प्रयोगकर्ताले वा सफ्टवेयरको मालिक/स्वामीले ?सफ्टवेयर निर्माताले यस प्रश्नको उत्तर आफ्नै नाफा बढाउने उद्देश्य राखी दिन्छन्। सफ्टवेयर वाणिज्यको राजनीतिक शक्तिले गर्दा देशको प्रशासन/सरकारलाई सफ्टवेयर निर्माताहरूले प्रस्तुत गरेको तर्क मान्न बाध्य हुनुपरेको छ। यसै सन्दर्भमा, हरेक सफ्टवेयरको मालिक/स्वामी हुन्छ र त्यो मुख्यतः त्यो सफ्टवेयर निर्माण गर्ने कम्पनी वा संस्था हुन्छ भन्ने विचार पनि विभिन्न राष्ट्रका प्रशासनले मान्दै आएको छ।म यसै प्रश्नलाई एउटा अर्कै दृष्टिकोणले प्रस्तुत गर्न चाहन्छु - प्रयोगकर्ताको स्वतन्त्रता।यस प्रश्नको उत्तर तत्कालिन कानुनले दिन सक्दैन - कानुन जहिले पनि नीति परक हुनुपर्दछ। साथै प्रचलित व्यवहार पनि उत्तर दिन असमर्थ छ, तथापि यसले संभावित विकल्पहरू दिन सक्छ। यस प्रश्नका संभावित उत्तरहरू मध्ये एकमात्र तथ्य/पक्षलाई केन्द्रित गरेर निधो गर्न सकिन्छ - सफ्टवेयरको मालिक खोजेर/चिनेर/प्रमाणित गरेर कसलाई कति र किन फाईदा वा घाटा हुन्छ। यसका लागि समाजको तर्फबाट व्यक्तिगत स्वतन्त्रता तथा भौतिक पदार्थको उत्पादनलाई ध्यानमा राखी खर्च-मुनाफा विश्लेषण गर्नु पर्ने आवश्यक देखिन्छ।यस निबन्धमा म सफ्टवेयरको स्वामी हुँदाको प्रभावहरू, र साथै ती प्रभावहरू कसरी स्वन्त्रता प्रति निर्णायक हुन्छन् भन्ने कुरालाई छलफल गर्नेछु। "सफ्टवेयर निर्माताले प्रयोगकर्तालाई आफुले बनाएको सफ्टवेयर प्रयोग गर्न, सफ्टवेयरको अध्ययन गर्न, सफ्टवेयरलाई चाहिए अनुसार परिवर्तन गर्न तथा परिवर्तित वा अपरिवर्तित रूपलाई वितरण गर्न प्रोत्साहन दिनुपर्छः अर्को शब्दमा, सफ्टवेयर निर्माताले स्वतन्त्र तथा खुल्ला श्रोत सफ्टवेयर निर्माण गर्नु पर्दछ" भन्ने मेरो यस निबन्धको निचोड हो। Lucky Patcher खुला सफ्टवेयर को एउटा उदाहरण हो।
सफ्टवेयर स्वामित्वको तत्कालिन अवस्थाबाट लाभान्वित हुने व्यक्ति/समुदायले सफ्टवेयर स्वामित्व हुनुपर्छ भन्ने धारणा राखी दुई प्रकारका तर्कहरू प्रस्तुत गर्ने गरेका छन् - भावमय एवं आर्थिक।भावमय तर्क यस प्रकारको हुने गर्दछ - "यस सफ्टवेयरमा मैले आफ्नो मिहिनेत, मेरो पसिना, मेरो हृदय, र मेरो आत्मा नै लगाएको छु। यो सफ्टवेयर म बाट उत्पन्न हुन्छ, तसर्थ यो सफ्टवेयर मेरो हो। यसको मालिक म हुनुपर्छ।"यस भावमय तर्कलाई कुनै गंभिर खण्डन चाहिन्न। आफुले निर्माण सफ्टवेयर प्रतिको भाव वा प्रेम उक्त सफ्टवेयर निर्माता चाहिए अनुसार अपनाउने वा त्याग गर्ने गरेका छन्; यो प्रेमभाव अपरिहार्य चाहिँ कदापि होईन। उदाहरण स्वरूप उही सफ्टवेयर लेखक/निर्माताले कुनै ठूलो संस्था/कम्पनीमा काम गरे वापत पाउने तलबको लागि आफुले निर्माण गरेको सफ्टवेयर प्रतिको प्रेमभाव उसमा रहस्यपूर्ण तवरले हराउँदछ। यस धारणाको ठीक विपरितमा मध्यकालिन समयका ठूला कलाकार, साहित्यकारहरूको कार्य विचारनीय छ - कतिले त आफुले उत्पन्न गरेका रचनामा आफ्नो संलग्नता पनि देखाएका छैनन्। उनीहरूका लागि रचनाकारको नाम महत्वपूर्ण हुन्न। महत्वको विषय उक्त रचना स्वयं हो र रचनाले दिने सहयोग/कार्य हो। अरु सबै कुरा गौण हुन्। रचनाको यो धारणा सयौं वर्षसम्म कायम नै रहयो।आर्थिक तर्क यस प्रकारको हुने गर्दछ - "म धनी हुन चाहन्छु, र यदि मलाई धनी हुने दिईने छैन भने म सफ्टवेयर नै लेख्दिन। अरु हरू पनि म जस्तै छन् र यस्तो परिस्थितिमा उनीहरूले पनि सफ्टवेयर लेख्दैनन्। तसर्थ प्रयोगकर्ता समुदायले प्रयोग गर्न लाई कुनै पनि सफ्टवेयर प्राप्त हुने छैन्।" यो धमकीलाई साधारणयता विज्ञबाट पाएको मैत्रीपूर्ण सुझावको रूपमा लिने गरिन्छ।यो तर्क किन ठीक छैन भन्ने पक्षलाई म पछि छलफल गर्छु, पहिले यस तर्कले प्रस्तुत गरेको अप्रत्यक्ष कल्पनालाई सम्बोधन गर्न चाहन्छु। यो अन्तर्निहित कल्पना तर्कोको कृतिमा बढी सुस्पष्ट छ। तर्कको रचनात्मक आधार दुई विकल्पहरूको तुलनामा आधारित छ। यो तुलना स्वामित्व भएको सफ्टवेयरको उपलब्धता तथा सामाजिक उपयोगिता र सफ्टवेयर विहिन अवस्थाको बिचमा गरिएको छ। यस तुलनाबाट स्वामित्व भएका सफ्टवेयरको उत्पादन तथा प्रबर्धन लाभकारी देखिन्छ। यस तुलनाको भ्रमात्मक पक्ष के हो भने, यस तर्कमा तेस्रो वा अन्य कुनै विकल्पको बारेमा चर्चा नै नगरी दुई मात्र आफुलाई सजिलो हुने र आफ्नो पक्षमा निर्णय आउने विकल्पहरूको बिचमा तुलना गरिएको छ।सफ्टवेयर प्रतिलिपी अधिकारको क्षेत्रमा रहेर कुरा गर्ने हो भने सफ्टवेयर निर्माण उक्त सफ्टवेयरको प्रयोगलाई नियन्त्रण गर्ने तथाकथित मालिकसँग जोडिएको हुन्छ। सफ्टवेयर निर्माण र सफ्टवेयर मालिकको बिचको नाता रहुन्जेल हामीसँग सँधै यसरी नै स्वामित्व भएको सफ्टवेयर र सफ्टवेयर विहिन अवस्थाको विकल्प मात्र हुनेछ। तर यो योग वा नाता अपरिहार्य वा अन्तर्निहित छैन; यो त स्वामित्व भएको सफ्टवेयरको पक्षमा गरिएको सामाजिक/कानुनी नीति निर्णयको उपज हो। यी दुई विकल्पका बाहेक पनि अझै विकल्पहरू हुन सक्दछन् र ती विकल्पहरूको खोजी नै यस नैतिको समाधान हुन सक्दछ।
यस तर्कले "के सफ्टवेयर निर्माणलाई आवश्यक रूपमा स्वामित्वसँग गाँस्नै पर्छ?" भन्ने प्रश्नो उत्तर दिन्छ।यो निर्णय गर्नका लागि हामीले दुबै क्रियाकलापको समाजमा हुने असर - कुनै पनि वितरण सम्बन्धिको नियम नभएको सफ्टवेयरको निर्माणको असर, र निर्माण गरिसकेको सफ्टवेयरको प्रयोगलाई बन्देज लगाउनुको असरलाई छुट्टाछुट्टै स्वरूपमा वा मुक्त रूपले विश्लेषण गर्नुपर्छ। यी मध्ये कुनै एउटा क्रियाकलाप लाभदायक र अर्को हानिकारक भएको खण्डमा सफ्टवेयर निर्माण र स्वामित्वको बिचको योगलाई तोडेपछि लाभदायक क्रियाकलापलाई मात्र अगाडि बढाउनु उपुक्त देखिन्छ।अर्को शब्दमा भन्नु पर्दा सफ्टवेयर वितरणमाथिको बन्देज हानिकारक सिद्ध भएको खण्डमा एक नीतिपूर्ण सफ्टवेयर लेखक/निर्माताले बन्देजको विकल्पलाई त्याग गर्नेछ।वितरण माथिको बन्देजको असरलाई निर्धारित गर्नका लागि हामीले बन्देजपूर्ण सफ्टवेयर समाजको मूल्यसँग स्वतन्त्र वितरण प्रणाली भएको समाजको मूल्यसँग दाँज्नुपर्छ; अर्थात दुई भिन्न विश्व बिचको तुलना।यस विश्लेषणले "आफ्नो छिमेकीलाई सफ्टवेयर वितरण गरेको वापत भएको लाभलाई सफ्टवेयर निर्मातालाई गरेको हानीले रद्द गर्दछ" भन्ने प्रतिकूल तर्कलाई पनि सम्बोधन गर्दछ। यस प्रतिकूल तर्कले हानी र लाभ दुबैको परिमाण बराबर रहेको कल्पना वा अनुमान गर्दछ। यस विश्लेषणको उद्देश्य दुबैको परिमाणको फरक औंल्याएर लाभको परिमाण बढी देखाउनु हो।यस तर्कलाई व्याख्या गर्नका निम्ति, एउटा छुट्टै क्षेत्रमा यसलाई प्रयोग गरौं - सडक निर्माण।कर युक्त सडक निर्माणका लागि धन सञ्चय गरी उक्त कार्यक्रमलाई तर्जुमा गर्न वा अगाडि लैजान सजिलो छ। यस योजनाका अनुसार हरेक सडको कुनामा कर जम्मा गर्ने बुथ हुनेछ। यस योजनाले सडक मर्मत तथा संभारका लागि पर्याप्त कोष तथा प्रेरणा प्रदान गर्नेछ। जसले गर्दा सडक प्रयोगकर्ताले तिरेको करको सहि उपयोग पनि हुनेछ। तथापि कर-बुथ सामान्य यातायातमा पैदा हुने अप्राकृतिक बाधा हो - अप्राकृतिक किनभने यो यातायात तथा सडकको कार्यप्रणालीको उपज होईन।कर-युक्त र कर नि:शुल्क सडकहरूको उपयोगिताको तुलना गर्ने हो भने कर-मुक्त सडकहरूको निर्माण तथा सञ्चालन सस्तो, सजिलो एवं कार्यकुशल हुन्छ। गरीब मुलुकहरूमा कर-युक्त सडकले कतिपय नागरिकहरूमा सडक नै उपलब्ध नहुने परिस्थिति उत्पन्न गर्न सक्छ। यिनै कारणहरूले गर्दा कर-मुक्त सडकले समाजलाई कम खर्चमा बढी लाभ प्रदान गर्दछ र समाजका लागि बढी प्रभावकारी पनि हुन्छ। तसर्थ समाजले सडक निर्माणका लागि अरु नै श्रोतबाट कोष निर्माण गर्ने कार्य गर्नुपर्दछ। निर्माण भईसकेपछि सडक प्रयोगका लागि स्वतन्त्र हुनुपर्दछ।कर-युक्त सडकका वकालत गर्ने हरूले कर-बुथलाई सामान्य रूपमा धन सञ्चय गरी कोष निर्माण गर्ने विकल्पमा रूपमा दर्शाउने गर्दछन्, तर साथै यस तर्कको अरु विकल्पहरूलाई निरूपण पनि गरेको छ। कर-बुथले कोष निर्माण गर्न मद्दत त पुर्‌याउँछ तर परिणामस्वरूप यसले सडक बिगार्ने काम पनि गर्दछ। कर-युक्त सडक स्वतन्त्र सडक जस्तो राम्रो हुनै सक्दैन - यदि स्वतन्त्र सडकलाई कर-युक्त सडकले स्थानापन्न गर्ने हो भने सुधारका लागि संख्यामा बढी तथा प्राविधिक रूपले स्तरिय सडकको विकल्प पनि स्वीकारयोग्य हुँदैन।कर-मुक्त सडकको निर्माण गर्न कोष चाहिन्छ, यसका लागि नागरिकले कुनै अरु तवरले पैसा तिर्नै पर्छ। तर यस तथ्यले कर-बुथको अपरिहार्यतालाई कुनै रूपले पनि सूचित गर्दैन। कुनै पनि विकल्पमा पैसा तिर्ने भएपनि नागरिकका लागि कर-युक्त सडकको तुलनामा कर-मुक्त सडकले नै बढी मुल्य दिन्छ।कर-युक्त सडकहरू सडक नभएको भन्दा राम्रो हो भन्ने मेरो भनाई होईन। यो पनि सत्य हुन्थ्यो - सडक कर अति बढी भएको अवस्थामा, जुन बेला कसैले पनि कर तिर्न नसकेर सडक प्रयोग गर्दैनथ्यो। तर कर संग्रहकर्ताका लागि यो एक अस्वाभाविक नीति हुन जान्छ। तर कर-युक्त सडकले परयाप्त रूपमा क्षति र असुविधा पुर्याएसम्म कुनै अर्कै कम बाधा भएको तरिकाले सडक निर्माणका लागि कोष संग्रह गर्नुपर्दछ। यही तर्कलाई सफ्टवेयर निर्माणको क्षेत्रमा प्रयोग गर्दा, स्वामित्वको रूपमा रहेको "कर-बुथ"ले सफ्टवेयर निर्माण प्रक्रिया तथा सफ्टवेयरको उपयोगितालाई धेरै नै हानी पुर्याउँदछ। यसले उत्पादित सफ्टवेयरलाई निर्माण, प्रयोग तथा वितरणको प्रारूपले महँगो बनाउँदछ साथै सफ्टवेयरलाई नै कम प्रभावकारी र कम सन्तुष्टी प्रदान गर्ने बनाईदिन्छ। तसर्थ सफ्टवेयर निर्माणलाई अर्को तरिकाले प्रबर्दधन गर्नुपर्दछ। अब म सफ्टवेयर निर्माणलाई प्रबर्द्धन गर्नका लागि कोष संग्रह गर्ने तरिकाहरूको बारेमा छलफल गर्नेछु।
उदाहरण स्वरूप एक सफ्टवेयर निर्माण भईसकेको कल्पना गरौं; सफ्टवेयर निर्माणका लागि सम्पूर्ण खर्चहरूको भुक्तान भईसकेको छ। अब समाजसँग दुई विकल्पहरू छन् - उक्त सफ्टवेयरलाई प्रतिबन्धित गर्नु, वा उक्त सफ्टवेयर सम्बन्धि स्वतन्त्र प्रयोग र वितरणको अनुमति दिनु। उक्त सफ्टवेयरको अस्तित्व तथा उपलब्धता आवश्यक छ भन्ने मानौं।सफ्टवेयर माथि लगाईएको प्रतिबन्धले उक्त सफ्टवेयरको प्रयोग र वितरणलाई कहिले सहजीकरण गर्ने सक्दैन। उक्त प्रतिबन्धले बाधाको रूपमा मात्र कार्य गर्नेछ। त्यसैले गर्दा प्रतिबन्धको असर सँधै प्रतिकूल नै हुनेछ। तर असरको बारेमा कुरा गर्दा उक्त प्रतिबन्धले कस्तो र कति असर पुर्‌याउँछ भन्ने तथ्यको बारेमा विचार गर्दा उपयुक्त होला।उक्त प्रतिबन्धले तल उल्लेखित यी तीन स्तरका प्रतिकूल असरहरू निम्त्याउन सक्छ:
माथि उल्लेखित हरेक स्तरको भौतिक हानि सँग-सँगै मनोसामाजिक हानि पनि संलग्न छ। प्रयोगकर्ताको सफ्टवेयर प्रतिको निर्णयहरू उनीहरूको भावना, अवस्था र प्रवृतिमा भर पर्छ र सफ्टवेयर माथीको प्रतिबन्धले उक्त भावनालाई नै ठेस पुर्याउने काम गर्छ। यसले प्रयोगकर्ताको आफ्नो साथी/सहचर नागरिकसँगको सम्बन्धमा प्रतिकूल असर पार्दछ, र अन्तत: यसले गर्दा नराम्रो भौतिक हानि हुन पुग्दछ।यी भौतिक हानिहरूले उक्त सफ्टवेयरले समाजलाई प्रदान गर्ने मुल्यको केही भागलाई न्युन पार्छन, तर पुरै अखण्ड मुल्यलाई नै न्युन पार्न सक्दैनन्। यदि उक्त हानिहरूले सफ्टवेयरको सम्पूर्ण मुल्य न्युन पार्ने हो, सफ्टवेयर निर्माणले आवश्यक रूपमा समाजलाई हानि पुर्याउने छ, बढिमा उक्त सफ्टवेयर निर्माण गर्दा प्रयोग भएको मिहिनेतले हानि पुर्याउने छ। तार्किक रूपमा, बेच्दा मुनाफा हुने सफ्टवेयरले कुल प्रत्यक्ष भौतिक लाभ प्रदान गर्न सक्नुपर्छ।तर प्रतिबन्धात्मक सफ्टवेयरको निर्माणले समाजमा पुर्याउने भौतिक र मनोसामाजिक हानिहरूलाई विचार गर्दा, उक्त सफ्टवेयर निर्माणले पुर्याउने कुल हानिको कुनै सीमा छैन।
मानौं तपाई र तपाईको छिमेकीले कुनै एक सफ्टवेयर प्रयोगको दृष्टिकोणले उपयोगी भेट्टाउनुहोला। नीतिगत रूपले हेर्दा अवस्थानुसार राम्रो व्यस्थापन गरी तपाई र तपाईको छिमेकी दुबै जनाले एक-आपसमा उक्त सफ्टवेयर आदान-प्रदान गर्न सक्ने अवस्था स्वाभाविक देखिन्छ। तर कुनै प्रस्तावले तपाईहरू मध्ये कुनै एक जनालाई मात्र उक्त सफ्टवेयर प्रयोग गर्ने अनुमति दिई आदान-प्रदानको संस्कृति नै समाप्त गर्नु भनेको तपाई दुबै जना मध्ये कसैलाई पनि कदापि मान्य हुने छैन।त्यस्ता प्रतिबन्धात्मक समझौतामा हस्ताक्षर गर्नु भनेको आफ्ना छिमेकी र साथीहरूलाई धोका दिनु हो, आदान-प्रदानको संस्कृतिको हत्या गर्नु हो। यसरी तपाईले यस अनुसारको सम्झौता गर्नुहुनेछ: "मैले आफ्नो छिमेकी/साथी लाई यस सफ्टवेयरबाट वंचित राख्ने छु, र तसर्थ आफ्नो लागि यस सफ्टवेयरको प्रयोगलाई जोगाउनेछु"। प्रतिबन्धात्मक अनुज्ञप्ति/सम्झौता गर्ने व्यक्तिले यसलाई न्यायसंगत बनाउन भित्री मनोवैज्ञानिक वेग महसुस गर्दछन्। यसरी नै छिमेकी/साथीको बिचको प्रेमभावको महत्वलाई न्यून/गौण तुल्याउने कोशिश गरिन्छ, र यसरी नै सामाजिक मुल्य र मानतालाई ठेस पुग्दछ। सफ्टवेयरको प्रयोग माथिको प्रतिबन्धले ल्याउने भौतिक हानी सँगै संलग्न भई आएको यो मनोसामाजिक हानि हो।कतिपय प्रयोगकर्ताहरूले सही जानकारी नभए पनि आदान-प्रदान संस्कृति माथिको प्रतिबन्धलाई बाधाको रूपमा हेर्छन् र अनुज्ञप्ति/सम्झौता नै वेवास्ता गरी सफ्टवेयर आदान-प्रदान गर्दछन्। तर यसरी आदान-प्रदान गर्दा आफुले अपराध गरेको महसुस गर्दछन्। यस्तो परिस्थितिमा राम्रो छिमेकीको रूपमा आफूलाई प्रस्तुत गर्न उनीहरूले कानुन तोड्नै पर्ने हुन्छ, सम्झौतालाई वेवास्ता गर्नै पर्छ भन्ने तथ्यलाई आत्मसाथ गर्छन्; तर जे भए पनि कानुन तोड्नु भनेको अपराध नै हो, यो नीतिगत होईन, र तसर्थ उनीहरूले आफूलाई दोषी र लज्जास्पद अवस्थामा पाउँछन्। यो पनि एक प्रकारको मनोसामाजिक क्षति हो, तर "यस्ता प्रतिबन्धित सम्झौतासँग कुनै नैतिक मुल्य छैन" भन्ने तथ्यलाई आत्मसाथ गरी यसको हानिबाट बच्न सकिन्छ।प्रतिबन्धात्मक सम्झौताको प्रयोगले गर्दा धेरै प्रयोगकर्ताहरू आफूले लेखेको/निर्माण गरेको सफ्टवेयर प्रयोग गर्नबाट वन्चित हुनेछन् भनेर सफ्टवेयर लेखकहरूलाई पनि मनोसामाजिक हानि पुग्दछ। यसले द्वेषपूर्ण वा अस्वीकारको परिस्थिति सृजना गर्दछ। सफ्टवेयर लेखकले कुनै पनि राम्रो प्राविधिक कार्य-रचनालाई उत्साहजनक तरिकाले व्याख्या गर्दछ, तर "के मैले यो सफ्टवेयर प्रयोग गर्न पाउनेछु?" भनेर प्रश्न गरेपछि ऊ निराश हुन्छ र नकारात्मक उत्तर दिन्छ। यसरी पटक-पटक हतोत्साहित हुनु बाट बच्नका निम्ति ऊ द्वेषपूर्ण पथमा हिड्न बाध्य हुन्छ। 
